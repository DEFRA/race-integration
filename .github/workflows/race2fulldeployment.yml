on:
  push:
    branches: [none] # [ main ]
  pull_request:
    branches: [none] # [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
name: Deploy All For RACE2 Project
jobs:
  create-all-resources:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@main
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy All resources
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ vars.azcliversion}}
        inlineScript: |
          az --version
          az group create -n ${{ vars.resourcegroupname}} -l ${{vars.location}}
          az deployment group what-if --name 'AllResourceDeployments' --resource-group ${{ vars.resourcegroupname}} --template-file './RACE2/bicepfiles/createallresources.bicep' -p './RACE2/DeploymentYamlFiles/deployAlResourcesParameters.json'
          az deployment group create --name 'AllResourceDeployments' --resource-group ${{ vars.resourcegroupname}}' --template-file './RACE2/bicepfiles/createallresources.bicep' -p './RACE2/DeploymentYamlFiles/deployAlResourcesParameters.json'
    - name: print result
      run: echo "resources created successfully"
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: create-all-resources
    steps:
    - name: 'Azure ACR Login'
      uses: azure/docker-login@v1
      with:
          login-server: ${{ vars.REGISTRY_LOGIN_SERVER }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: 'Docker build and push - SecurityProvider'    
      run: |
        docker build . -f Dockerfile_SecurityProvider -t ${{ vars.REGISTRY_LOGIN_SERVER }}/race2securityprovider:latest
        docker push ${{ vars.REGISTRY_LOGIN_SERVER }}/race2securityprovider:latest
    - name: 'Docker build and push - WebApi'    
      run: |
        docker build . -f Dockerfile_WebApi -t ${{ vars.REGISTRY_LOGIN_SERVER }}/race2webapi:latest
        docker push ${{ vars.REGISTRY_LOGIN_SERVER }}/race2webapi:latest
    - name: 'Docker build and push - FrontEnd'    
      run: |
        docker build . -f Dockerfile_FrontEnd -t ${{ vars.REGISTRY_LOGIN_SERVER }}/race2frontend:latest
        docker push ${{ vars.REGISTRY_LOGIN_SERVER }}/race2frontend:latest

    - name: print result
      run: echo "container images created successfully"
  deploy-container-apps:
    runs-on: ubuntu-latest
    needs:  [build-and-deploy,create-all-resources]
    steps:
    - uses: actions/checkout@main
    - name: Deploy Container Apps
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ vars.azcliversion}}
        inlineScript: |
          az --version
          az deployment group what-if --name 'AllContainerAppsDeployments' --resource-group ${{ vars.resourcegroupname}} --template-file './RACE2/bicepfiles/createAllContainerApps.bicep' -p './RACE2/DeploymentYamlFiles/deployAllContainerAppsParameters.json'

          az deployment group create --name 'AllContainerAppsDeployments' --resource-group ${{ vars.resourcegroupname}} --template-file './RACE2/bicepfiles/createAllContainerApps.bicep' -p './RACE2/DeploymentYamlFiles/deployAllContainerAppsParameters.json'
              
    - name: print result
      run: echo "container apps created successfully"