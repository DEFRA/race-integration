@inherits LayoutComponentBase
@using System.Timers
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime

<PageTitle>RACE2.FrontEndWeb</PageTitle>

<div class="page">
    <main>
        @Body
    </main>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }
    private Timer timerObj;

    protected override async Task OnInitializedAsync()
    {
        // Set the Timer delay.
        timerObj = new Timer(20*60*1000); //2o minutes idle time
        timerObj.Elapsed += UpdateTimer;
        timerObj.AutoReset = false;
        // Identify whether the user is active or inactive using onmousemove and onkeypress in JS function.
        await JSRuntime.InvokeVoidAsync("timeOutCall", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void TimerInterval()
    {
        // Resetting the Timer if the user in active state.
        timerObj.Stop();
        // Call the TimeInterval to logout when the user is inactive.
        timerObj.Start();
    }

    private void UpdateTimer(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            // Log out when the user is inactive.
            var authstate = await stateAuthenticate;
            if (authstate.User.Identity.IsAuthenticated)
            {
                UriHelper.NavigateTo("logout", true);
            }
        });
    }
} 