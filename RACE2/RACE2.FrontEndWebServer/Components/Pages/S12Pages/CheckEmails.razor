@page "/check-emails"
@using Microsoft.AspNetCore.Authorization;
@using RACE2.FrontEndWebServer.Components
@using RACE2.Dto
@using System.Text.RegularExpressions;
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Check email address - Send a supervising engineer's annual statement - GOV.UK</PageTitle>

<HeaderWithBanner />

<div class="govuk-width-container" style="min-height: 70vh;">

    <FeedbackBannerSignOut />

    <a class="govuk-back-link" @onclick="GoToPrevPage" style="color:black">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">
        @if (ValidationErrors.Count == 0)
        {
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-three-quarters">
                    <EditForm Model="@EmailAddresses" OnSubmit="GoToNextPage">
                        <div class="govuk-form-group">
                            <h1 class="govuk-heading-l govuk-!-margin-bottom-6">
                                Check email addresses
                            </h1>
                            @{
                                int emailcount = 1;
                            }
                            @foreach (var email in EmailAddresses)
                            {
                                <dl class="govuk-summary-list">
                                    <div class="govuk-summary-list__row">
                                        <dt class="govuk-summary-list__key">
                                            Email address @emailcount
                                        </dt>
                                        <dd class="govuk-summary-list__value" for="reservoir-town-old" id="reservoir-town-old" name="reservoir-town-old">
                                            @email
                                        </dd>
                                        <dd class="govuk-summary-list__actions">
                                            <ul class="govuk-summary-list__actions-list">
                                                <li class="govuk-summary-list__actions-list-item">
                                                    <a class="govuk-link govuk-link--no-visited-state" href="#" @onclick="()=>EditEmail(email)" @onclick:preventDefault>Edit<span class="govuk-visually-hidden">email address</span></a>
                                                </li>
                                                <li class="govuk-summary-list__actions-list-item">
                                                    <a class="govuk-link govuk-link--no-visited-state" href="#" @onclick="()=>DeleteEmail(email)" @onclick:preventDefault>Delete<span class="govuk-visually-hidden">email address</span></a>
                                                </li>
                                            </ul>
                                        </dd>
                                    </div>
                                </dl>
                                emailcount++;
                            }
                        </div>

                        <button type="submit" draggable="false"
                                class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6 govuk-!-margin-right-4"
                                data-module="govuk-button">
                            Continue
                        </button>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <div class="govuk-error-summary" data-module="govuk-error-summary">
                <div role="alert">
                    <h2 class="govuk-error-summary__title">
                        There is a problem
                    </h2>
                    @foreach (var error in ValidationErrors.Values)
                    {
                        <div class="govuk-error-summary__body">
                            <ul class="govuk-list govuk-error-summary__list">
                                <li>
                                    <a href="#">@error</a>
                                </li>
                            </ul>
                        </div>
                    }
                </div>
            </div>
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-three-quarters">
                    <EditForm Model="@EmailAddresses" OnSubmit="GoToNextPage">
                        <div class="govuk-form-group govuk-form-group--error govuk-!-margin-top-8 govuk-!-margin-bottom-4">
                            <h1 class="govuk-heading-l govuk-!-margin-bottom-6">
                                Check email addresses
                            </h1>
                            @{
                                int emailcount = 1;
                            }
                            @foreach (var email in EmailAddresses)
                            {
                                <dl class="govuk-summary-list">
                                    <div class="govuk-summary-list__row">
                                        <dt class="govuk-summary-list__key">
                                            Email address @emailcount
                                        </dt>
                                        <dd class="govuk-summary-list__value" for="reservoir-town-old" id="reservoir-town-old" name="reservoir-town-old">
                                            @email
                                        </dd>
                                        <dd class="govuk-summary-list__actions">
                                            <ul class="govuk-summary-list__actions-list">
                                                <li class="govuk-summary-list__actions-list-item">
                                                    <a class="govuk-link govuk-link--no-visited-state" href="#" @onclick="()=>EditEmail(email)" @onclick:preventDefault>Edit<span class="govuk-visually-hidden">email address</span></a>
                                                </li>
                                                <li class="govuk-summary-list__actions-list-item">
                                                    <a class="govuk-link govuk-link--no-visited-state" href="#" @onclick="()=>DeleteEmail(email)" @onclick:preventDefault>Delete<span class="govuk-visually-hidden">email address</span></a>
                                                </li>
                                            </ul>
                                        </dd>
                                    </div>
                                </dl>
                                emailcount++;
                            }
                        </div>

                        <button type="submit" draggable="false"
                                class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6 govuk-!-margin-right-4"
                                data-module="govuk-button">
                            Continue
                        </button>
                    </EditForm>
                </div>
            </div>
        }
    </main>
</div>

<Footer />

@code {
    public List<string> EmailAddresses { get; set; } = new List<string>();
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    public Dictionary<string, string> ValidationErrors = new Dictionary<string, string>();
    public ReportSubmissionDataDto reportSubmissionData { get; set; } = new ReportSubmissionDataDto();

    protected async override Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateTask;// AuthenticationStateProvider.GetAuthenticationStateAsync();
        var reportSubmissionDataState = await ProtectedSessionStore.GetAsync<ReportSubmissionDataDto>("CurrentReportSubmissionData");
        reportSubmissionData = reportSubmissionDataState.Value;
        EmailAddresses = reportSubmissionData.EmailListToSomeOne;
        await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        await base.OnInitializedAsync();
    }

    public async Task GoToNextPage()
    {
        ValidationErrors.Clear();
        if (String.IsNullOrEmpty(EmailAddresses[0]))
        {
            ValidationErrors.Add("Email1Empty", "Enter an email address");
        }
        if (!String.IsNullOrEmpty(EmailAddresses[0]) && !IsValid(EmailAddresses[0]))
        {
            ValidationErrors.Add("Email1Invalid", EmailAddresses[0] + " is not in right email format");
        }
        for (int i = 1; i < EmailAddresses.Count(); i++)
        {
            if (!String.IsNullOrEmpty(EmailAddresses[i]) && !IsValid(EmailAddresses[i]))
            {
                ValidationErrors.Add("Email" + i.ToString() + "Invalid", "Email " + i.ToString() + " is not in right email format");
            }
        }
        if (ValidationErrors.Count == 0)
        {
            reportSubmissionData.EmailListToSomeOne = EmailAddresses;
            await ProtectedSessionStore.SetAsync("CurrentReportSubmissionData", reportSubmissionData);
            bool forceLoad = true;
            NavigationManager.NavigateTo("/upload-your-template", forceLoad);
        }
        else
        {
            await InvokeAsync(() =>
           {
               StateHasChanged();
           });
        }
    }

    public void GoToPrevPage()
    {
        bool forceLoad = true;
        string pagelink = "/enter-emails";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }

    private async Task EditEmail(string Email)
    {
        reportSubmissionData.EmailEditDelete = Email;
        await ProtectedSessionStore.SetAsync("CurrentReportSubmissionData", reportSubmissionData);
        bool forceLoad = true;
        string pagelink = "/edit-email";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }

    private async Task DeleteEmail(string Email)
    {
        reportSubmissionData.EmailEditDelete = Email;
        await ProtectedSessionStore.SetAsync("CurrentReportSubmissionData", reportSubmissionData);
        bool forceLoad = true;
        string pagelink = "/delete-email";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }

    private static bool IsValid(string email)
    {
        string regex = @"^((?!\.)[\w-_.]*[^.])(@\w+)(\.\w+(\.\w+)?[^.\W])$";

        return Regex.IsMatch(email, regex, RegexOptions.IgnoreCase);
    }
}