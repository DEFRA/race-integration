@page "/enter-emails"
@using Microsoft.AspNetCore.Authorization;
@using RACE2.FrontEndWebServer.Components
@using RACE2.Dto
@using System.Text.RegularExpressions;
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Enet Emails - Send a supervising engineer's annual statement - GOV.UK</PageTitle>

<HeaderWithBanner />

<div class="govuk-width-container" style="min-height: 70vh;">

    <FeedbackBanner />

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">
        <a class="govuk-back-link" @onclick="GoToPrevPage" style="color:black">Back</a>
        @if (!EmailError)
        {
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                <EditForm Model="@EmailAddresses" OnSubmit="GoToNextPage">
                    <div class="govuk-form-group">
                        <fieldset class="govuk-fieldset">
                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--xl">
                                <h1 class="govuk-fieldset__heading">
                                    Enter the email addresses you want to send the statement to
                                </h1>
                            </legend>

                            <p class="govuk-body govuk-!-padding-top-4">
                                You can send your statement to one or more people.
                            </p>

                            <div class="govuk-form-group govuk-!-margin-top-8">
                                <label class="govuk-label" for="email1">
                                    Email address
                                </label>
                                <InputText class="govuk-input" id="email1" name="email1" autocomplete="email1" @bind-Value="@EmailAddresses[0]">
                                </InputText>
                            </div>

                            <div class="govuk-form-group">
                                <label class="govuk-label" for="email2">
                                    Email address (optional)
                                </label>
                                <InputText class="govuk-input" id="email2" name="email2" autocomplete="email2" @bind-Value="@EmailAddresses[1]">
                                </InputText>
                            </div>

                            <div class="govuk-form-group">
                                <label class="govuk-label" for="email3">
                                    Email address (optional)
                                </label>
                                <InputText class="govuk-input" id="email3" name="email3" autocomplete="email3" @bind-Value="@EmailAddresses[2]">
                                </InputText>
                            </div>

                            <div class="govuk-form-group">
                                <label class="govuk-label" for="email4">
                                    Email address (optional)
                                </label>
                                <InputText class="govuk-input" id="email4" name="email4" autocomplete="email4" @bind-Value="@EmailAddresses[3]">
                                </InputText>
                            </div>

                            <div class="govuk-form-group">
                                <label class="govuk-label" for="email5">
                                    Email address (optional)
                                </label>
                                <InputText class="govuk-input" id="email5" name="email5" autocomplete="email5" @bind-Value="@EmailAddresses[4]">
                                </InputText>
                            </div>

                        </fieldset>
                    </div>

                    <button type="submit" draggable="false"
                            class="govuk-button govuk-!-margin-top-3 govuk-!-margin-bottom-6 govuk-!-margin-right-4"
                            data-module="govuk-button">
                        Continue
                    </button>
                </EditForm>                
            </div>
            </div>
        }
        else
        {
            <div class="govuk-error-summary" data-module="govuk-error-summary">
                <div role="alert">
                    <h2 class="govuk-error-summary__title">
                        There is a problem
                    </h2>
                    <div class="govuk-error-summary__body">
                        <ul class="govuk-list govuk-error-summary__list">
                            <li>
                                <a href="#">First Email is empty or one or more Emails are not in correct format</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                    <EditForm Model="@EmailAddresses" OnSubmit="GoToNextPage">
                        <div class="govuk-form-group">
                            <fieldset class="govuk-fieldset">
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--xl">
                                    <h1 class="govuk-fieldset__heading">
                                        Enter the email addresses you want to send the statement to
                                    </h1>
                                </legend>

                                <p class="govuk-body govuk-!-padding-top-4">
                                    You can send your statement to one or more people.
                                </p>

                                <div class="govuk-form-group govuk-!-margin-top-8">
                                    <label class="govuk-label" for="email1">
                                        Email address
                                    </label>
                                    <InputText class="govuk-input" id="email1" name="email1" autocomplete="email1" @bind-Value="@EmailAddresses[0]">
                                    </InputText>
                                </div>

                                <div class="govuk-form-group">
                                    <label class="govuk-label" for="email2">
                                        Email address (optional)
                                    </label>
                                    <InputText class="govuk-input" id="email2" name="email2" autocomplete="email2" @bind-Value="@EmailAddresses[1]">
                                    </InputText>
                                </div>

                                <div class="govuk-form-group">
                                    <label class="govuk-label" for="email3">
                                        Email address (optional)
                                    </label>
                                    <InputText class="govuk-input" id="email3" name="email3" autocomplete="email3" @bind-Value="@EmailAddresses[2]">
                                    </InputText>
                                </div>

                                <div class="govuk-form-group">
                                    <label class="govuk-label" for="email4">
                                        Email address (optional)
                                    </label>
                                    <InputText class="govuk-input" id="email4" name="email4" autocomplete="email4" @bind-Value="@EmailAddresses[3]">
                                    </InputText>
                                </div>

                                <div class="govuk-form-group">
                                    <label class="govuk-label" for="email5">
                                        Email address (optional)
                                    </label>
                                    <InputText class="govuk-input" id="email5" name="email5" autocomplete="email5" @bind-Value="@EmailAddresses[4]">
                                    </InputText>
                                </div>

                            </fieldset>
                        </div>

                        <button type="submit" draggable="false"
                                class="govuk-button govuk-!-margin-top-3 govuk-!-margin-bottom-6 govuk-!-margin-right-4"
                                data-module="govuk-button">
                            Continue
                        </button>
                    </EditForm>
                </div>
            </div>
        }
    </main>
</div>

<Footer />

@code {
    public List<string> EmailAddresses { get; set; } = new List<string>();
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public ReportSubmissionDataDto reportSubmissionData { get; set; } = new ReportSubmissionDataDto();
    private bool IsEmail1Empty { get; set; } = false;
    private bool IsValidEmail1 { get; set; } = false;
    private bool IsValidEmail2 { get; set; } = false;
    private bool IsValidEmail3 { get; set; } = false;
    private bool IsValidEmail4 { get; set; } = false;
    private bool IsValidEmail5 { get; set; } = false;
    private bool EmailError { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        for (int i = 0; i < 5; i++)
            EmailAddresses.Add("");
        AuthenticationState authState = await AuthenticationStateTask;// AuthenticationStateProvider.GetAuthenticationStateAsync();
        var reportSubmissionDataState = await ProtectedSessionStore.GetAsync<ReportSubmissionDataDto>("CurrentReportSubmissionData");
        reportSubmissionData = reportSubmissionDataState.Value;
        await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        await base.OnInitializedAsync();
    }

    public async Task GoToNextPage()
    {
        EmailError = false;
        IsValidEmail1 = false;
        IsValidEmail2 = false;
        IsValidEmail3 = false;
        IsValidEmail4 = false;
        IsValidEmail5 = false;

        if (String.IsNullOrEmpty(EmailAddresses[0]))
        {
            IsEmail1Empty = true;
            EmailError = true;
        }
        else
        {
            if (!IsValid(EmailAddresses[0]))
            {
                IsValidEmail1 = true;
                EmailError = true;
            }
            if (!String.IsNullOrEmpty(EmailAddresses[1]) && !IsValid(EmailAddresses[1]))
            {
                IsValidEmail2 = true;
                EmailError = true;
            }
            if (!String.IsNullOrEmpty(EmailAddresses[2]) && !IsValid(EmailAddresses[2]))
            {
                IsValidEmail3 = true;
                EmailError = true;
            }
            if (!String.IsNullOrEmpty(EmailAddresses[3]) && !IsValid(EmailAddresses[3]))
            {
                IsValidEmail4 = true;
                EmailError = true;
            }
            if (!String.IsNullOrEmpty(EmailAddresses[4]) && !IsValid(EmailAddresses[4]))
            {
                IsValidEmail5 = true;
                EmailError = true;
            }
        }
        if (!EmailError)
        {
            reportSubmissionData.EmailListToSomeOne = EmailAddresses;
            await ProtectedSessionStore.SetAsync("CurrentReportSubmissionData", reportSubmissionData);
            bool forceLoad = true;
            NavigationManager.NavigateTo("/check-emails", forceLoad);  
        }
        else
        {
            await InvokeAsync(() =>
           {
               StateHasChanged();
           });
        }
    }

    public void GoToPrevPage()
    {
        bool forceLoad = true;
        string pagelink = "/send-your-statement-to-someone-also";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
    
    private static bool IsValid(string email)
    {
        string regex = @"^[^@\s]+@[^@\s]+\.(com|net|org|gov)$";

        return Regex.IsMatch(email, regex, RegexOptions.IgnoreCase);
    }
}