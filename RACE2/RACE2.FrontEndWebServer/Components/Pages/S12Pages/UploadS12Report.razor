@page "/upload-your-template"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using RACE2.DataModel
@using RACE2.Dto
@using RACE2.Services
@using RACE2.Notification
@inject NavigationManager NavigationManager
@inject IBlobStorageService blobStorageService
@inject IUserService userService
@inject IJSRuntime jsRuntime
@inject IConfiguration _config
@inject IReservoirService reservoirService
@inject INotification _notificationService
@inject ProtectedSessionStorage ProtectedSessionStore

@attribute [Authorize]

<PageTitle>Upload your statement - Send a supervising engineer's annual statement - GOV.UK</PageTitle>

<HeaderWithBanner />

<div class="govuk-width-container" style="min-height: 69vh;">

    <FeedbackBannerSignOut />

    <a class="govuk-back-link" @onclick="goback" style="color:black">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-three-quarters">
                @if (!FileUploadInProgress)
                {
                    <EditForm Model="@uploadFileData" OnSubmit="OnUploadSubmit">
                        @if (ValidationErrors.Count > 0)
                        {
                            <div class="govuk-error-summary" data-module="govuk-error-summary">
                                <div role="alert">
                                    <h2 class="govuk-error-summary__title">
                                        There is a problem
                                    </h2>
                                    @foreach (var error in ValidationErrors.Values)
                                    {
                                        <div class="govuk-error-summary__body">
                                            <ul class="govuk-list govuk-error-summary__list">
                                                <li>
                                                    <a href="#">@error</a>
                                                </li>
                                            </ul>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="govuk-form-group govuk-form-group--error">
                                <label class="govuk-label" for="file-upload">
                                    <h1 class="govuk-heading-xl govuk-!-margin-bottom-5">
                                        Upload your statement
                                    </h1>
                                </label>
                                <div id="file-upload-hint" class="govuk-hint">
                                    You can upload your statement as a PDF or Word document. It can be up to 30MB.
                                </div>
                                <br />
                                @foreach (var error in ValidationErrors.Values)
                                {
                                    <p id="file-upload-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span>@error
                                    </p>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="govuk-form-group">
                                <label class="govuk-label" for="file-upload">
                                    <h1 class="govuk-heading-xl govuk-!-margin-bottom-5">Upload your statement</h1>
                                </label>
                                <div id="file-upload-hint" class="govuk-hint">
                                    You can upload your statement as a PDF or Word document. It can be up to 30MB.
                                </div>
                                <br />
                            </div>
                        }
                        <InputFile id="file-upload" name="file-upload" class="govuk-file-upload" OnChange="OnInputFileChange" multiple />
                        <p class="govuk-body" style="margin-top:25px;">We’ll check the statement when you upload it.</p>
                        <p class="govuk-body">This could take up to 20 seconds.</p>
                        <button type="submit" draggable="false"
                                class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6 govuk-!-margin-right-4"
                                data-module="govuk-button">
                            Upload and send statement
                        </button>
                    </EditForm>
                }
                else
                {
                    @if (ValidationErrors.Count > 0)
                    {
                        <div class="govuk-error-summary" data-module="govuk-error-summary">
                            <div role="alert">
                                <h2 class="govuk-error-summary__title">
                                    There is a problem
                                </h2>
                                @foreach (var error in ValidationErrors.Values)
                                {
                                    <div class="govuk-error-summary__body">
                                        <ul class="govuk-list govuk-error-summary__list">
                                            <li>
                                                <a href="#">@error</a>
                                            </li>
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    <div class="govuk-grid-row">
                        <div class="govuk-form-group">
                            <label class="govuk-label" for="file-upload-1">
                                <h1 class="govuk-heading-xl govuk-!-margin-bottom-5">Uploading your statement</h1>
                            </label>
                            <div class="upload-progress-container">
                                @* <img class="upload-icon govuk-!-margin-top-3" src="images/upload file icon.svg" alt="Uploading file icon"> *@
                                @if (uploadPerc < 100)
                                {
                                    <h2 style="font-size: 24pt; font-weight: 400; font-family: GDS Transport, arial, sans-serif; float:left;">
                                        <img style="width:50px;height:50px;" src=@imageSourceProgress alt="Uploading file icon">
                                        @uploadPerc% complete.
                                    </h2>
                                }
                                else
                                {
                                    <h2 style="font-size: 24pt; font-weight: 400; font-family: GDS Transport, arial, sans-serif; float:left;">
                                        <img style="width:50px;height:50px;" src=@imageSourceComplete alt="Uploading file icon">
                                        100% complete.
                                    </h2>
                                }
                            </div>
                        </div>
                    </div>
                    @*                     <div class="govuk-panel govuk-panel--confirmation govuk-!-margin-top-9">
                <div class="govuk-panel__title">
                File upload in progress.
                </div>
                </div>
                <p class="govuk-body">
                This could take up to 20 seconds.<br /><br />
                <div> Progress:<br /></div>
                <div>
                <progress max=@timeToWait value=@uploadTimeElapsed ></progress><span style="color:black;margin-left:10px;">@uploadPerc% complete</span>
                </div>
                </p>
                *@                }
            </div>
        </div>
    </main>
</div>

<Footer />

@code {
    private bool FileUploadInProgress { get; set; } = false;
    private string _fileNameResult;
    public string fileExtn = String.Empty;
    private string UserEmail { get; set; } = "";
    private UserSpecificDto userDetails { get; set; }
    public string ReservoirName { get; set; } = default!;
    private IBrowserFile loadedFile;
    private IBrowserFile selectedFile;
    private List<IBrowserFile> selectedFiles { get; set; } = new List<IBrowserFile>();
    private UploadFileData uploadFileData { get; set; } = new UploadFileData();
    private List<FileUploadViewModel> fileUploadViewModels = new();
    DocumentDTO documentDTO = new DocumentDTO();

    public Dictionary<string, string> ValidationErrors = new Dictionary<string, string>();

    public ReportSubmissionDataDto reportSubmissionData { get; set; }

    public int uploadTimeElapsed { get; set; } = 0;
    public int uploadPerc { get; set; } = 0;
    public int timeToWait { get; set; } = 0;
    private string? imageSourceProgress = $"assets/images/upload-file-icon.svg";
    private string? imageSourceComplete = $"assets/images/upload-complete-icon.svg";

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var reportSubmissionDataState = await ProtectedSessionStore.GetAsync<ReportSubmissionDataDto>("CurrentReportSubmissionData");
        reportSubmissionData = reportSubmissionDataState.Value;
        UserEmail = reportSubmissionData.UserEmail;
        userDetails = await userService.GetUserByEmailID(UserEmail);
        FileUploadInProgress = false;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        clearAllUploadFileSettings();
        await base.OnInitializedAsync();
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }
    private async Task OnUploadSubmit()
    {
        clearAllUploadFileSettings();
        uploadFileData.EmptyFileSize = long.Parse(_config["EmptyFileSizeLimit"]);
        if (selectedFiles == null)
        {
            NoFileSelected();
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        else if (selectedFiles.Count() > 1)
        {
            MoreThanOneFileSelected();
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        else
        {
            selectedFile = selectedFiles.FirstOrDefault();
            var fileExtns = selectedFile.Name.Split('.');
            int totalExtns = fileExtns.Length;
            fileExtn = selectedFile.Name.Split('.')[totalExtns - 1];
            var fileExtensionsAllowed = _config["SupportedUploadFileExtensions"].Split(';');
            if (!fileExtensionsAllowed.Contains(fileExtn))
            //if (!(fileExtn == "docx" || fileExtn == "doc" || fileExtn == "pdf"))
            {
                WrongExtensionSelected();
            }
            if (selectedFile.Size > uploadFileData.MaxFileSize)
            {
                MaxFileSizeExceeded();
            }
            if (selectedFile.Size < uploadFileData.EmptyFileSize)
            {
                FileIsEmpty();
            }
            if (ValidationErrors.Count() > 0)
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
            else
            {
                try
                {
                    //var containerName = UserName.Split("@")[0];
                    //if (containerName.Contains('.'))
                    //{
                    //    containerName = containerName.Split('.')[0];
                    //}
                    var containerNameToUplodTo = _config["UnscannedContainer"];//"unscannedcontent";
                                                                               //var trustedFileNameForFileStorage = ReservoirRegName + "_S12_" + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Year + "."+ extn;
                                                                               //var trustedFileNameForFileStorage = ReservoirRegName + "_S12_" + SubmissionReference + "." + fileExtn;
                    var savedReportSubmissionData = await ProtectedSessionStore.GetAsync<ReportSubmissionDataDto>("CurrentReportSubmissionData");
                    // var trustedFileNameForFileStorage = reportSubmissionData.SubmissionReference + "_" + DateTime.Now.Year + DateTime.Now.Month + DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + "." + fileExtn;

                    SubmissionStatus insertStatus = new SubmissionStatus();
                    insertStatus.ReservoirId = Int32.Parse(reportSubmissionData.ReservoirId);
                    insertStatus.LastModifiedByUserId = userDetails.Id;
                    insertStatus.SubmittedByUserId = userDetails.Id;
                    insertStatus.Status = "Sent";
                    insertStatus.ServiceId = 1;
                    insertStatus.SubmittedDateTime = DateTime.UtcNow;
                    insertStatus.LastModifiedDateTime = DateTime.UtcNow;
                    insertStatus.RevisionSummary = savedReportSubmissionData.Value == null ? "" : savedReportSubmissionData.Value.ResubmitReason;
                    // insertStatus.IsRevision = savedReportSubmissionData.Value == null ? false : true;
                    insertStatus.IsRevision = reportSubmissionData.SendResendValue == "Send" ? false : true;
                    insertStatus.SubmissionReference = reservoirService.GenerateSubmissionReference(Int32.Parse(reportSubmissionData.ReservoirId), insertStatus.SubmittedDateTime, insertStatus.ServiceId);
                    var trustedFileNameForFileStorage = insertStatus.SubmissionReference;
                    //Store the uploaded document information
                    documentDTO.FileName = selectedFile.Name.Split('.')[0];
                    documentDTO.FileType = fileExtn;
                    documentDTO.DateSent = DateTime.UtcNow;
                    documentDTO.FileLocation = selectedFile.Name;
                    documentDTO.ReservoirId = Int32.Parse(reportSubmissionData.ReservoirId);
                    documentDTO.SuppliedViaService = 1;
                    documentDTO.BlobStorageFileName = insertStatus.SubmissionReference;
                    documentDTO.DocumentType = "S12";
                    documentDTO.SuppliedBy = userDetails.Id;
                    var docID = await reservoirService.InsertUploadDocumentDetails(documentDTO);

                    var blobUrl = await blobStorageService.UploadFileToBlobAsync(containerNameToUplodTo, trustedFileNameForFileStorage, selectedFile.ContentType, selectedFile.OpenReadStream(uploadFileData.MaxFileSize));
                    if (blobUrl != null)
                    {
                        FileUploadViewModel fileUploadViewModel = new FileUploadViewModel()
                            {
                                FileName = trustedFileNameForFileStorage,
                                FileStorageUrl = blobUrl,
                                ContentType = selectedFile.ContentType,
                            };

                        fileUploadViewModels.Add(fileUploadViewModel);


                        var res = await reservoirService.InsertSubmissionDetails(insertStatus);
                        // if (savedReportSubmissionData.Value.SendResendValue=="Send")
                        // {
                        //     updatedStatus = await reservoirService.UpdateReservoirStatus(Int32.Parse(reportSubmissionData.ReservoirId), userDetails.Id, "Sent", false, "");

                        // }
                        // else
                        // {
                        //     updatedStatus = await reservoirService.UpdateReservoirStatus(Int32.Parse(reportSubmissionData.ReservoirId), userDetails.Id, "Sent", true, savedReportSubmissionData.Value.ResubmitReason);
                        // }
                        //_fileNameResult=await jsRuntime.InvokeAsync<string>("getFileName");

                        FileUploadInProgress = true;
                        StateHasChanged();
                        timeToWait = Int32.Parse(_config["TimeToWaitForUpload"]);
                        uploadTimeElapsed = 0;
                        while (uploadTimeElapsed <= timeToWait - 2)
                        {
                            System.Threading.Thread.Sleep(1000);
                            uploadTimeElapsed++;
                            uploadPerc = Convert.ToInt32((Convert.ToDouble(uploadTimeElapsed) / Convert.ToDouble(timeToWait)) * 100.0);
                            StateHasChanged();
                        }

                        //For testing without virus scan, comment the next line and uncomment the next to next line
                        var containerNameToDownloadFrom = _config["CleanContainer"]; //"cleanfiles";
                                                                                     //var containerNameToDownloadFrom = _config["UnscannedContainer"];

                        var RSTEmailAddress = String.IsNullOrEmpty(_config["RSTEmailAddress"]) ? userDetails.Email : _config["RSTEmailAddress"];
                        var bytes = await blobStorageService.GetBlobAsByteArray(containerNameToDownloadFrom, trustedFileNameForFileStorage);
                        // if (bytes == null)
                        // {
                        //     System.Threading.Thread.Sleep(5000);//wait for 5 more seconds
                        //     bytes = await blobStorageService.GetBlobAsByteArray(containerNameToDownloadFrom, trustedFileNameForFileStorage);
                        // }
                        if (bytes != null)
                        {
                            await _notificationService.SendConfirmationMailtoSE(userDetails.Email, reportSubmissionData.ReservoirRegName);
                            if (selectedFile.Size < uploadFileData.NotifyServiceFileAttachmentLimit)
                            {
                                await _notificationService.SendConfirmationMailtoRST(RSTEmailAddress, reportSubmissionData.ReservoirRegName, bytes, userDetails.cFirstName + " " + userDetails.cLastName, reportSubmissionData.UndertakerName);
                                if (reportSubmissionData.YesNoValue == "Yes")
                                {
                                    await _notificationService.SendConfirmationMailWithAttachment(bytes, reportSubmissionData.UndertakerEmail, reportSubmissionData.ReservoirRegName);
                                }
                            }
                            else
                            {
                                var internalEmail = _config["InternalEmailAddress"];
                                await _notificationService.SendInternalMail(internalEmail, reportSubmissionData.ReservoirRegName, reportSubmissionData.UndertakerEmail, reportSubmissionData.YesNoValue);
                            }

                            //Check this.......
                            //Store the uploaded document information
                            documentDTO.SubmissionId = res.Id;
                            await reservoirService.InsertDocumentRelatedTable(Int32.Parse(reportSubmissionData.ReservoirId), res.Id, docID);
                            Serilog.Log.Logger.ForContext("User", UserEmail).ForContext("Application", "FrontEndWebServer").ForContext("Method", "UploadS12Report OnUploadSubmit").Information("File upload succeeded.");
                            uploadTimeElapsed++;
                            uploadPerc = Convert.ToInt32((Convert.ToDouble(uploadTimeElapsed) / Convert.ToDouble(timeToWait)) * 100.0);
                            StateHasChanged();
                            System.Threading.Thread.Sleep(2000);
                            goToNextPage();
                        }
                        else
                        {
                            // bool cleanFile = false;
                            bool notScanned = false;
                            var containerNameforMaliciousFile = _config["MaliciousContainer"]; //"maliciousfiles";
                            System.Threading.Thread.Sleep(timeToWait);
                            var maliciousbytes = await blobStorageService.GetBlobAsByteArray(containerNameforMaliciousFile, trustedFileNameForFileStorage);
                            //if (maliciousbytes == null)
                            //{
                            //    notScanned = true;
                            //}
                            if (maliciousbytes != null)
                            {
                                Serilog.Log.Logger.ForContext("User", UserEmail).ForContext("Application", "FrontEndWebServer").ForContext("Method", "UploadS12Report OnUploadSubmit").Fatal("File infected by virus.");
                                FileContainsVirus();
                                await InvokeAsync(() =>
                                {
                                    StateHasChanged();
                                });
                                //var scanResult = await reservoirService.GetScannedResultbyDocId(docID);
                                //if (scanResult.AVScanDate == DateTime.MinValue)
                                //{
                                //    notScanned = true;
                                //}
                                //else if (scanResult.AVScanDate != DateTime.MinValue && scanResult.CleanFileStorageLink != null && scanResult.IsClean)
                                //{
                                //    notScanned = false;
                                //    cleanFile = true;
                                //}
                            }
                            else
                            {
                                notScanned = true;
                            }
                            if (notScanned)
                            {
                                Serilog.Log.Logger.ForContext("User", UserEmail).ForContext("Application", "FrontEndWebServer").ForContext("Method", "UploadS12Report OnUploadSubmit").Fatal("File not scanned for virus.");
                                FileUploadFailed();
                                //await reservoirService.UpdateReservoirStatus(Int32.Parse(reportSubmissionData.ReservoirId), userDetails.Id, "In progress",false,"");

                                await InvokeAsync(() =>
                                {
                                    StateHasChanged();
                                });
                            }
                            //else if (!cleanFile)
                            //{
                            //    Serilog.Log.Logger.ForContext("User", UserName).ForContext("Application", "FrontEndWebServer").ForContext("Method", "UploadS12Report OnUploadSubmit").Fatal("File infected by virus.");
                            //    FileVirusScanFailed();
                            //    await InvokeAsync(() =>
                            //    {
                            //        StateHasChanged();
                            //    });
                            //}

                        }
                    }
                    else
                    {
                        Serilog.Log.Logger.ForContext("User", UserEmail).ForContext("Application", "FrontEndWebServer").ForContext("Method", "UploadS12Report OnUploadSubmit").Fatal("File upload failed.");
                        FileUploadFailed();
                        //await reservoirService.UpdateReservoirStatus(Int32.Parse(reportSubmissionData.ReservoirId), userDetails.Id, "In progress",false,"");
                        await InvokeAsync(() =>
                        {
                            StateHasChanged();
                        });
                    }
                }
                catch (Exception ex)
                {
                    Serilog.Log.Logger.ForContext("User", UserEmail).ForContext("Application", "FrontEndWebServer").ForContext("Method", "UploadS12Report OnUploadSubmit").Fatal("File upload failed : " + ex.Message);
                    FileUploadFailed();
                    //await reservoirService.UpdateReservoirStatus(Int32.Parse(reportSubmissionData.ReservoirId), userDetails.Id, "In progress",false,"");
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                }
                finally
                {
                }
            }
        }
    }

    private void goback()
    {
        bool forceLoad = true;
        string pagelink = "/send-your-statement";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
    private void goToNextPage()
    {
        bool forceLoad = true;
        string pagelink = "/upload-confirmation";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }

    private void clearAllUploadFileSettings()
    {
        ValidationErrors.Clear();
    }
    private void MaxFileSizeExceeded()
    {
        ValidationErrors.Add("MaxFileSizeExceeded", "The selected file must be smaller than 30MB");
    }
    private void NoFileSelected()
    {
        ValidationErrors.Add("NoFileSelected", "Select a file");
    }
    private void MoreThanOneFileSelected()
    {
        ValidationErrors.Add("MoreThanOneFileSelected", "You can only select up to 1 file at the same time");
    }
    private void WrongExtensionSelected()
    {
        ValidationErrors.Add("WrongExtensionSelected", "The selected file must be a PDF or a Word document");
    }
    private void FileIsEmpty()
    {
        ValidationErrors.Add("FileIsEmpty", "The selected file is empty");
    }
    private void FileContainsVirus()
    {
        ValidationErrors.Add("FileContainsVirus", "The selected file contains a virus");
    }
    private void FilePasswordProtected()
    {
        ValidationErrors.Add("FilePasswordProtected", "FilePasswordProtected");
    }
    private void FileIncorrectTemplate()
    {
        ValidationErrors.Add("FileIncorrectTemplate", "FileIncorrectTemplate");
    }
    private void FileUploadFailed()
    {
        ValidationErrors.Add("FileUploadFailed", "The selected file could not be uploaded - try again");
    }

    private void FileVirusScanFailed()
    {
        ValidationErrors.Add("FileVirusScanFailed", "The selected file contains a virus");
    }

    public class UploadFileData
    {
        public long MaxFileSize { get; set; }
        public long NotifyServiceFileAttachmentLimit { get; set; }
        public long EmptyFileSize { get; set; }
        public UploadFileData()
        {
            MaxFileSize = 30 * 1024 * 1024;
            //EmptyFileSize = 12 * 1024;
            NotifyServiceFileAttachmentLimit = 2 * 1024 * 1024;
        }
    }
}
}