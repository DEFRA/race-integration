@page "/upload-s12report/{ReservoirId}/{ReservoirRegName}"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using RACE2.DataModel
@using RACE2.Dto
@using RACE2.Services
@inject NavigationManager NavigationManager
@inject IBlobStorageService blobStorageService
@inject IUserService userService
@inject IJSRuntime jsRuntime
@attribute [Authorize]

<div class="govuk-width-container ">

    <a class="govuk-back-link" @onclick="goback">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">

                <h1 class="govuk-heading-xl">What is the new reservoir name?</h1>

                <EditForm Model="@CurrentReservoir" OnSubmit="OnUploadSubmit">

                    <div class="govuk-form-group">
                        <label class="govuk-label govuk-label--m" for="FileName">
                            Enter folder of file to upload
                        </label>
@*                        <InputText id="FileName" class="govuk-input" @bind-Value="@selectedFolder" />*@
                        <br /><br />
                        <InputFile OnChange="OnInputFileChange" accept=".docx,.dotx,.pdf,.png,.jpg,.jpeg" single/>
                        @if (fileLoading)
                        {
                            <i class="fa fa-refresh"></i> <span>Loading...</span>
                        }
                    </div>

                    <button class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6" data-module="govuk-button" type="submit">Upload File</button>

                </EditForm>

            </div>
        </div>
        @if (displayMessage.Length > 0)
        {
            <div class="alert alert-success">
                <strong>Success!</strong> @displayMessage.
            </div>
        }
        <br />
        <div class="row">
            @if (fileUploadViewModels.Count > 0)
            {
                <table class="table table-responsive table-bordered">
                    <thead class="text-primary">
                        <tr>
                            <th>File</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attachment in fileUploadViewModels)
                        {

                            <tr>
                                <td>
                                    <a class="text-primary"><i class="fa-solid fa-paperclip"></i> @attachment.FileName</a>
                                </td>

                                <td>
                                    <span class="oi oi-delete" aria-hidden="true" @onclick="() => OnFileDeleteClick(attachment)"></span>
                                    <span class="oi oi-eye" aria-hidden="true" @onclick="() => OnFileViewClick(attachment)"></span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">
                    <strong>No Files!</strong>
                </div>
            }
        </div>
    </main>
</div>

@code{
    private int UserId { get; set; } = 0;
    private string UserName { get; set; } = "Unknown";
    private UserDetail UserDetail { get; set; }
    public Reservoir CurrentReservoir { get; set; } = new Reservoir();
    public string ReservoirName { get; set; } = default!;
    private string warningMessage = "";
    private string displayMessage = "";
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool fileLoading;
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private List<FileUploadViewModel> fileUploadViewModels = new();
    [Parameter]
    public string ReservoirId { get; set; }
    [Parameter]
    public string ReservoirRegName { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected override async void OnInitialized()
    {
        AuthenticationState authState = await AuthenticationStateTask; // AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Claims.ToList().FirstOrDefault(c => c.Type == "name").Value;
        var userDetails = await userService.GetUserByEmailID(UserName);
        UserId = userDetails.Id;
        UserDetail = new UserDetail()
            {
                UserName = UserName,
                Id = UserId,
                Email = userDetails.Email
            };
        CurrentReservoir = new Reservoir();
        base.OnInitialized();
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async void OnUploadSubmit()
    {
        fileLoading = true;
        foreach (var file in selectedFiles)
        {
            try
            {
                var extn = file.Name.Split('.')[1];
                var containerName = UserName.Split("@")[0];
                if (containerName.Contains('.'))
                {
                    containerName = containerName.Split('.')[0];
                }
                var trustedFileNameForFileStorage = "S12Report_" + CurrentReservoir.PublicName + "_" + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Year + "." + extn;
                var blobUrl = await blobStorageService.UploadFileToBlobAsync(containerName, trustedFileNameForFileStorage, file.ContentType, file.OpenReadStream(20971520));
                if (blobUrl != null)
                {
                    FileUploadViewModel fileUploadViewModel = new FileUploadViewModel()
                        {
                            FileName = trustedFileNameForFileStorage,
                            FileStorageUrl = blobUrl,
                            ContentType = file.ContentType,
                        };

                    fileUploadViewModels.Add(fileUploadViewModel);
                    displayMessage = trustedFileNameForFileStorage + " Uploaded!!";
                }
                else
                    warningMessage = "File Upload failed, Please try again!!";

            }
            catch (Exception ex)
            {
                warningMessage = "File Upload failed, Please try again!!";
            }
        }

        fileLoading = false;
        this.StateHasChanged();
    }

    private async void OnFileDeleteClick(FileUploadViewModel attachment)
    {
        try
        {
            var containerName = UserName.Split("@")[0];
            if (containerName.Contains('.'))
            {
                containerName = containerName.Split('.')[0];
            }
            var deleteResponse = await blobStorageService.DeleteFileToBlobAsync(containerName, attachment.FileName);
            if (deleteResponse)
            {
                fileUploadViewModels.Remove(attachment);
                displayMessage = attachment.FileName + " Deleted!!";
            }

        }
        catch (Exception)
        {
            warningMessage = "Something went wrong! Please try again.";
        }
        this.StateHasChanged();
    }
    private async void OnFileViewClick(FileUploadViewModel attachment)
    {
        try
        {
            var containerName = UserName.Split("@")[0];
            if (containerName.Contains('.'))
            {
                containerName = containerName.Split('.')[0];
            }
            var sasToken = await blobStorageService.GetBlobAsTokenByFile(containerName, attachment.FileName);
            if (sasToken != null)
            {
                string fileUrl = attachment.FileStorageUrl + "?" + sasToken;
                await jsRuntime.InvokeAsync<object>("open", fileUrl, "_blank");
            }

        }
        catch (Exception)
        {
            warningMessage = "Something went wrong! Please try again.";
        }
        this.StateHasChanged();
    }

    private void goback()
    {
        bool forceLoad = false;
        string pagelink = "/reservoir-details";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
}