@page "/upload-your-template/{ReservoirId}/{ReservoirRegName}/{UndertakerName}/{UndertakerEmail}/{YesNoValue}"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using RACE2.DataModel
@using RACE2.Dto
@using RACE2.Services
@inject NavigationManager NavigationManager
@inject IBlobStorageService blobStorageService
@inject IUserService userService
@inject IReservoirService reservoirService
@inject IJSRuntime jsRuntime
@attribute [Authorize]

<HeaderWithBanner />

<div class="govuk-width-container" style="min-height: 69vh;">

    <FeedbackBannerSignOut />

    <a class="govuk-back-link" @onclick="goback" style="color:black">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-three-quarters">
                <EditForm Model="@uploadFileData" OnSubmit="OnUploadSubmit">
                    @if (uploadFileData.MaxFileSizeExceeded)
                    {
                        <div class="govuk-error-summary" data-module="govuk-error-summary">
                            <div role="alert">
                                <h2 class="govuk-error-summary__title">
                                    There is a problem
                                </h2>
                                <div class="govuk-error-summary__body">
                                    <ul class="govuk-list govuk-error-summary__list">
                                        <li>
                                            <a href="#">The selected file must be smaller than 30MB</a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="govuk-form-group govuk-form-group--error">
                            <label class="govuk-label" for="file-upload-2">
                                <h1 class="govuk-heading-xl govuk-!-margin-bottom-5">
                                    Upload your statement
                                </h1>
                            </label>
                            <div id="file-upload-hint" class="govuk-hint">
                                You can upload your statement as a PDF or Word document. It can be up to 30MB.
                            </div>
                            <br />
                            <p id="file-upload-2-error" class="govuk-error-message">
                                <span class="govuk-visually-hidden">Error:</span>The selected file must be smaller than 30MB
                            </p>
                            <InputFile class="govuk-file-upload govuk-file-upload--error" id="file-upload-2" name="fileUpload2" type="file"
                                       aria-describedby="file-upload-1-error" OnChange="OnInputFileChange" accept=".docx,.pdf" />
                        </div>
                    }
                    else
                    {
                        <div class="govuk-form-group">
                            <label class="govuk-label" for="file-upload-1">
                                <h1 class="govuk-heading-xl govuk-!-margin-bottom-5">Upload your statement</h1>
                            </label>
                            <div id="file-upload-hint" class="govuk-hint">
                                You can upload your statement as a PDF or Word document. It can be up to 30MB.
                            </div>
                            <br />
                            <InputFile id="file-upload-1" class="govuk-file-upload" OnChange="OnInputFileChange" accept=".docx,.pdf" />
                        </div>
                    }
                    <button type="submit" draggable="false"
                            class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6 govuk-!-margin-right-4"
                            data-module="govuk-button">
                        Send statement
                    </button>
                </EditForm>

            </div>
        </div>
    </main>
</div>

<Footer />

@code{
    private int UserId { get; set; } = 0;
    private string UserName { get; set; } = "Unknown";
    private UserDetail UserDetail { get; set; }
    public string ReservoirName { get; set; } = default!;
    private IBrowserFile loadedFile;
    IBrowserFile selectedFile;
    private UploadFileData uploadFileData { get; set; } = new UploadFileData();
    private List<FileUploadViewModel> fileUploadViewModels = new();
    [Parameter]
    public string ReservoirId { get; set; }
    [Parameter]
    public string ReservoirRegName { get; set; }
    [Parameter]
    public string UndertakerName { get; set; }
    [Parameter]
    public string UndertakerEmail { get; set; }
    [Parameter]
    public string YesNoValue { get; set; }

    public string displayMessage { get; set; }

    public string warningMessage { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateTask; // AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Claims.ToList().FirstOrDefault(c => c.Type == "name").Value;
        var userDetails = await userService.GetUserByEmailID(UserName);
        UserId = userDetails.Id;
        UserDetail = new UserDetail()
            {
                UserName = UserName,
                Id = UserId,
                Email = userDetails.Email
            };
        var rid = ReservoirId;
        var rname = ReservoirRegName;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        await base.OnInitializedAsync();
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile.Size > uploadFileData.MaxFileSize)
        {
            uploadFileData.MaxFileSizeExceeded = true;
        }
        else
        {
            uploadFileData.MaxFileSizeExceeded = false;
        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private async Task OnUploadSubmit()
    {
        try
        {
            var extn = selectedFile.Name.Split('.')[1];
            var containerName = UserName.Split("@")[0];
            if (containerName.Contains('.'))
            {
                containerName = containerName.Split('.')[0];
            }
            var trustedFileNameForFileStorage = ReservoirRegName + "_S12_" + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Year + "." + extn;
            var blobUrl = await blobStorageService.UploadFileToBlobAsync(containerName, trustedFileNameForFileStorage, selectedFile.ContentType, selectedFile.OpenReadStream(uploadFileData.MaxFileSize));
            if (blobUrl != null)
            {
                FileUploadViewModel fileUploadViewModel = new FileUploadViewModel()
                    {
                        FileName = trustedFileNameForFileStorage,
                        FileStorageUrl = blobUrl,
                        ContentType = selectedFile.ContentType,
                    };

                fileUploadViewModels.Add(fileUploadViewModel);
                displayMessage = trustedFileNameForFileStorage + " Uploaded!!";
                SubmissionStatus updatedStatus = await reservoirService.UpdateReservoirStatus(Int32.Parse(ReservoirId), UserDetail.Id, "Sent");
                goToNextPage();
            }
            else
                warningMessage = "File Upload failed, Please try again!!";

        }
        catch (Exception ex)
        {
            warningMessage = "File Upload failed, Please try again!!";
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void goback()
    {
        bool forceLoad = false;
        string pagelink = $"/send-your-statement/{ReservoirId}/{ReservoirRegName}/{UndertakerName}/{UndertakerEmail}";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
    private void goToNextPage()
    {
        bool forceLoad = false;
        string pagelink = $"/upload-confirmation/{ReservoirId}/{ReservoirRegName}/{UndertakerName}/{UndertakerEmail}/{YesNoValue}";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
    public class UploadFileData
    {
        public long MaxFileSize { get; set; }
        public bool MaxFileSizeExceeded { get; set; }
        public bool noFileSelected { get; set; }
        public UploadFileData()
        {
            MaxFileSize = 30 * 1024 * 1024;
        }
    }
}


