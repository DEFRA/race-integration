@page "/confirm-create-password"
@using RACE2.Services
@using RACE2.Dto;
@using RACE2.DataModel;
@inject NavigationManager NavigationManager
@inject IUserService userService
@using Microsoft.AspNetCore.Authorization
@using RACE2.FrontEndWebServer.Components
@attribute [Authorize]

<HeaderWithBanner />

<HeaderWithBanner />

<div class="govuk-width-container" style="min-height: 69vh;">

    <FeedbackBanner />
    @*   <a class="govuk-back-link" @onclick="GoToNextPage" style="color:black">Back</a> *@

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">


            <div class="govuk-panel govuk-panel--confirmation govuk-!-margin-top-9">
                <h1 class="govuk-panel__title">
                    Your password has been created
                </h1>
            </div>

            <p class="govuk-body">
                Continue to start your annual statement.
            </p>

            <button ole="button" draggable="false" class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6"
                    data-module="govuk-button" @onclick="GoToNextPage">
                Continue
            </button>

        </div>
    </div>


    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

    </main>
</div>

<Footer />

@code {
    private string UserName { get; set; } = "Unknown";
    private UserDetail UserDetail { get; set; } = default!;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected override async void OnInitialized()
    {
        AuthenticationState authState = await AuthenticationStateTask;// AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Claims.ToList().FirstOrDefault(c => c.Type == "name").Value;
        UserSpecificDto userDetails = await userService.GetUserByEmailID(UserName);
        UserDetail = new UserDetail()
            {
                UserName = UserName,
                Id = userDetails.Id,
                Email = userDetails.Email,
                cFirstName = userDetails.cFirstName,
                cLastName = userDetails.cLastName,
                cIsFirstTimeUser = userDetails.cIsFirstTimeUser
            };
        if ((bool)UserDetail.cIsFirstTimeUser)
        {
            await userService.UpdateFirstTimeUserLogin(userDetails.Email, false);
        }

        await base.OnInitializedAsync();
    }

    public void GoToNextPage()
    {
        bool forceLoad = true;
        string pagelink = "/logout";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
}