Heroku portal login password: Casc8d3

dotnet new tool-manifest
dotnet tool install StrawberryShake.Tools --version 13.5.1 --local
dotnet graphql init https://localhost:5003/graphql/ -n RACE2GraphQLClient -p ./RACE2GraphQLSchema
dotnet graphql download https://localhost:5003/graphql -f ./RACE2GraphQLSchema/schema.graphql

az login
az login -u kriss.sahoo@defra.gov.uk -p test

az acr login -n race2acr  -n race2acr
az acr login -n race2acr -u Race2Acr -p 3q23FKncYFoNMky5N+4arugBI6FHagtWC07sVgPHdo+ACRB3HwHE
az acr login race2acr.azurecr.io -n race2acr -u Race2Acr -p 3q23FKncYFoNMky5N+4arugBI6FHagtWC07sVgPHdo+ACRB3HwHE

az acr build -r race2acr -t race2acr.azurecr.io/race2securityprovider:v1 -f Dockerfile_SecurityProvider .
az acr build -r race2acr -t race2acr.azurecr.io/race2webapi:v1 -f Dockerfile_WebApi .
az acr build -r race2acr -t race2acr.azurecr.io/race2frontend:v1 -f Dockerfile_FrontEnd .
az acr build -r race2acr -t race2acr.azurecr.io/race2frontendweb:v1 -f Dockerfile_FrontEndWeb .


//purge images
az acr run --registry <ACR Name> --cmd 'acr purge --filter <repository name>:.*  --ago 0d --untagged --keep 1 --dry-run' /dev/null
az acr run --registry Race2ACR --cmd 'acr purge --filter race2securityprovider:.*  --ago 0d --keep 1 --dry-run' /dev/null

az acr run --registry <ACR Name> --cmd 'acr purge --filter <repository name>:.*  --ago 0d --untagged --keep 1' /dev/null

az account set -s AZR-RAC-POC1 //d9cce027-07b6-4275-a215-dd8d52b9d469
az acr run --registry Race2ACR --cmd 'acr purge --filter race2securityprovider:.*  --ago 0d --keep 1' /dev/null
az acr run --registry Race2ACR --cmd 'acr purge --filter race2frontendwebserver:.*  --ago 0d --keep 1' /dev/null
az acr run --registry Race2ACR --cmd 'acr purge --filter race2webapi:.*  --ago 0d --keep 1' /dev/null
az acr run --registry Race2ACR --cmd 'acr purge --filter race2webapiextrnal:.*  --ago 0d --keep 1' /dev/null

az acr run --registry POCRACINFCR1401 --cmd 'acr purge --filter race2securityprovider:.*  --ago 0d --keep 1' /dev/null
az acr run --registry POCRACINFCR1401 --cmd 'acr purge --filter race2frontendwebserver:.*  --ago 0d --keep 1' /dev/null
az acr run --registry POCRACINFCR1401 --cmd 'acr purge --filter race2webapi:.*  --ago 0d --keep 1' /dev/null
az acr run --registry POCRACINFCR1401 --cmd 'acr purge --filter race2webapiexternal:.*  --ago 0d --keep 1' /dev/null

az account set -s AZR-RAC-DEV1 //97ea02ef-73bc-4ee9-b320-b38a6b41b4d7
az acr run --registry DEVRACINFCR1401 --cmd 'acr purge --filter race2securityprovider:.*  --ago 0d --keep 1' /dev/null
az acr run --registry DEVRACINFCR1401 --cmd 'acr purge --filter race2frontendwebserver:.*  --ago 0d --keep 1' /dev/null
az acr run --registry DEVRACINFCR1401 --cmd 'acr purge --filter race2webapi:.*  --ago 0d --keep 1' /dev/null
az acr run --registry DEVRACINFCR1401 --cmd 'acr purge --filter race2webapiexternal:.*  --ago 0d --keep 1' /dev/null

az account set -s AZR-RAC-TST1  //9327c8db-cebb-445d-9933-1bca1a76b82e
az acr run --registry TSTRACINFCR1401 --cmd 'acr purge --filter race2securityprovider:.*  --ago 0d --keep 1' /dev/null
az acr run --registry TSTRACINFCR1401 --cmd 'acr purge --filter race2frontendwebserver:.*  --ago 0d --keep 1' /dev/null
az acr run --registry TSTRACINFCR1401 --cmd 'acr purge --filter race2webapi:.*  --ago 0d --keep 1' /dev/null
az acr run --registry TSTRACINFCR1401 --cmd 'acr purge --filter race2webapiexternal:.*  --ago 0d --keep 1' /dev/null

//sync kris branch with main
git checkout kris
git pull origin main
git merge main
git push origin

Server=tcp:pocracinfss1401.database.windows.net,1433;Initial Catalog=pocracinfdb1401;Persist Security Info=False;Authentication=Active Directory Default;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
create user [UserAssignedManagedIdentity] from external provider
alter role db_datareader add member [UserAssignedManagedIdentity]
alter role db_datawriter add member [UserAssignedManagedIdentity]
GRANT EXECUTE ON SCHEMA::dbo TO [UserAssignedManagedIdentity]

podman build -t race2acr.azurecr.io/race2securityprovider:v1 -f Dockerfile_SecurityProvider .
podman push race2acr.azurecr.io/race2securityprovider:v1

podman build -t race2acr.azurecr.io/race2webapi:v1 -f Dockerfile_WebApi .
podman push race2acr.azurecr.io/race2webapi:v1

podman build -t race2acr.azurecr.io/race2frontend:v1 -f Dockerfile_FrontEnd .
podman push race2acr.azurecr.io/race2frontend:v1

podman build -t race2acr.azurecr.io/race2frontendweb:v1 -f Dockerfile_FrontEndWeb .
podman push race2acr.azurecr.io/race2frontendweb:v1

# --- Azure Container App --- #
$resource_group = "race2projectrg"
$location="westeurope"
$log_analytics_workspace="race2appworkspace"
$CONTAINERAPPS_ENVIRONMENT="race2containerappenv"
$ContainerAppName ="race2securityprovider"
$remoteImageName="race2acr.azurecr.io/race2securityprovider:v1"
$MANAGEDIDENTITY="Race2ManagedIdentity"
$REGISTRY_SERVER="race2acr.azurecr.io"
$identityClientId = (az identity show --resource-group $RESOURCE_GROUP --name $MANAGEDIDENTITY --output json --query "clientId")
$identityResourceId = (az identity show --resource-group $RESOURCE_GROUP --name $MANAGEDIDENTITY --output json --query "id")

az group create -n $resource_group -l $location

az monitor log-analytics workspace create -n $log_analytics_workspace -g $resource_group -l $location
az monitor log-analytics workspace get-shared-keys -n race2loganalytics -g $resource_group

$LOG_ANALYTICS_WORKSPACE_CLIENT_ID=(az monitor log-analytics workspace show --query customerId -g $RESOURCE_GROUP -n $LOG_ANALYTICS_WORKSPACE --out tsv)
$LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET=(c)
 
az containerapp env create `
   --name $CONTAINERAPPS_ENVIRONMENT `
   --resource-group $RESOURCE_GROUP `
   --logs-workspace-id $LOG_ANALYTICS_WORKSPACE_CLIENT_ID `
   --logs-workspace-key $LOG_ANALYTICS_WORKSPACE_CLIENT_SECRET `
   --location "$location"

az deployment group create -g race2projectrg --template-file './bicepfiles/createcontainerappenv.bicep' --parameters './bicepfiles/createcontainerappenv.bicepparam'

------ Write-Host "Creating Container App"
 
az containerapp create `
  --name $ContainerAppName `
  --resource-group $RESOURCE_GROUP `
  --environment $CONTAINERAPPS_ENVIRONMENT `
  --image $remoteImageName `
  --registry-server $REGISTRY_SERVER `
  --registry-identity $identityResourceId `
  --target-port 80 `
  --ingress 'external' `
  --cpu 0.5 `
  --memory 1.0Gi `
  --min-replicas 0 `
  --max-replicas 2 `
  --env-vars ASPNETCORE_ENVIRONMENT=$ENVIRONMENT AzureAppConfigURL=$APPCONFIG_URL AZURE_CLIENT_ID=$identityClientId `
  --user-assigned $MANAGEDIDENTITY

  $remoteImageName="race2acr.azurecr.io/race2webapi:v1"
  $ContainerAppName ="race2webapicontainerapp"

  az containerapp create `
  --name $ContainerAppName `
  --resource-group $RESOURCE_GROUP `
  --environment $CONTAINERAPPS_ENVIRONMENT `
  --image $remoteImageName `
  --registry-identity $identityResourceId `
  --target-port 80 `
  --ingress 'external' `
  --cpu 0.5 `
  --memory 1.0Gi `
  --min-replicas 0 `
  --max-replicas 2 `
  --env-vars ASPNETCORE_ENVIRONMENT=$ENVIRONMENT AzureAppConfigURL=$APPCONFIG_URL AZURE_CLIENT_ID=$identityClientId `
  --user-assigned $MANAGEDIDENTITY

  $remoteImageName="race2acr.azurecr.io/race2frontend:v1"
  $ContainerAppName ="race2frontendcontainerapp"

  az containerapp create `
  --name $ContainerAppName `
  --resource-group $RESOURCE_GROUP `
  --environment $CONTAINERAPPS_ENVIRONMENT `
  --image $remoteImageName `
  --registry-identity $identityResourceId `
  --target-port 80 `
  --ingress 'external' `
  --cpu 0.5 `
  --memory 1.0Gi `
  --min-replicas 0 `
  --max-replicas 2 `
  --env-vars ASPNETCORE_ENVIRONMENT=$ENVIRONMENT AzureAppConfigURL=$APPCONFIG_URL AZURE_CLIENT_ID=$identityClientId `
  --user-assigned $MANAGEDIDENTITY

 
-----Write-Host "Finished creating container app"
 
Set-Location "$PSScriptRoot"

az containerapp env create -n race2appenv -g race2projectrg \
            --logs-destination log-analytics \
            --logs-workspace-id race2loganalytics \
            --logs-workspace-key myLogsWorkspaceKey \
            --location westeurope
            --internal-only

Create a container app and retrieve its fully qualified domain name.

az containerapp create -n MyContainerapp -g MyResourceGroup \
    --image myregistry.azurecr.io/my-app:v1.0 --environment MyContainerappEnv \
    --ingress external --target-port 80 \
    --registry-server myregistry.azurecr.io --registry-username myregistry --registry-password $REGISTRY_PASSWORD \
    --query properties.configuration.ingress.fqdn
    
Create a container app with resource requirements and replica count limits.

az containerapp create -n MyContainerapp -g MyResourceGroup \
    --image nginx --environment MyContainerappEnv \
    --cpu 0.5 --memory 1.0Gi \
    --min-replicas 4 --max-replicas 8

Create a container app with secrets and environment variables.

az containerapp create -n MyContainerapp -g MyResourceGroup \
    --image my-app:v1.0 --environment MyContainerappEnv \
    --secrets mysecret=secretvalue1 anothersecret="secret value 2" \
    --env-vars GREETING="Hello, world" SECRETENV=secretref:anothersecret

Create a container app using a YAML configuration. Example YAML configuration - https://aka.ms/azure-container-apps-yaml

az containerapp create -n MyContainerapp -g MyResourceGroup \
    --environment MyContainerappEnv \
    --yaml "path/to/yaml/file.yml"

az containerapp registry set -n race2frontend -g race2projectrg --server race2acr.azurecr.io.azurecr.io --username Race2ACR --password 3q23FKncYFoNMky5N+4arugBI6FHagtWC07sVgPHdo+ACRB3HwHE

Create a container app

az containerapp create `
  --name race2frontend `
  --resource-group race2projectrg `
  --environment race2appcontainerenv `
  --registry-username Race2ACR`
  --registry-password 3q23FKncYFoNMky5N+4arugBI6FHagtWC07sVgPHdo+ACRB3HwHE`
  --image race2acr.azurecr.io/race2frontend:v1`
  --target-port 80 `
  --ingress 'external' `
  --min-replicas 0 `
  --max-replicas 2 `
  --env-vars ASPNETCORE_ENVIRONMENT="Production"

Role Ids:

For ResourceGroup:
Contributor: b24988ac-6180-42a0-ab88-20f7382dd24c

For ACR:
AcrPull: 7f951dda-4ed3-4680-a7ca-43fe172d538d
AcrPush: 8311e382-0749-4cb8-b61a-304f252e45ec

For KeyVault:
Key Vault Secrets User: 4633458b-17de-408a-b874-0445c86b69e6
Key Vault Secrets Officer: b86a8fe4-44ce-4948-aee5-eccb2c155cd7
Key Vault Certificates Officer: a4417e6f-fecd-4de8-b567-7b0420556985

For AppConfig:
App Configuration Data Reader: 516239f1-63e1-4d78-a4de-a74fb236a071
App Configuration Data Owner: 5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b

For SqlServer:
Reader: acdd72a7-3385-48ef-bd42-f606fba81ae7

CREATE TABLE [dbo].[Logs](  
    [Id] [int] IDENTITY(1,1) NOT NULL,  
    [Message] [nvarchar](max) NULL,  
    [MessageTemplate] [nvarchar](max) NULL,  
    [Level] [nvarchar](128) NULL,  
    [TimeStamp] [datetimeoffset](7) NOT NULL,  
    [Exception] [nvarchar](max) NULL,  
    [Properties] [xml] NULL,  
    [LogEvent] [nvarchar](max) NULL,  
    [UserName] [nvarchar](200) NULL,  
    [IP] [varchar](200) NULL,  
 CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED   
(  
    [Id] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]  
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY] 