@page "/enter-email"
@inject RACE2GraphQLClient client
@inject NavigationManager NavigationManager
@inject AppState appState

<div class="govuk-width-container ">

    <a class="govuk-back-link" href="javascript:history.back()">Back</a>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds" style="margin-top:40px;">
            <EditForm Model="appState">
               <div class="govuk-form-group">
                    <h1 class="govuk-label-wrapper">
                        <label class="govuk-label govuk-label--l" for="event-name">
                            Enter your email address
                        </label>
                    </h1>
                    <InputText class="govuk-input" @bind-Value="@Email"
                               style="width:400px;border: 2px solid #000000;border-radius:unset;font-size: 18px;">
                    </InputText>
                </div>
                <button class="govuk-button govuk-button--start govuk-!-margin-top-2 govuk-!-margin-bottom-8" @onclick=@(args => GoToNextPage())
                        data-module="govuk-button">
                    Continue
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    string? Email;
    private string errorMsg1 = "Email entered does not exist!!! Please try again.";
    private string errorMsg2 = "Input is not a valid email address!!! Please try again.";

    protected override void OnInitialized()
    {
        Email = appState.GetEmail();
    }
    
    protected async Task<string> GetEmailFromDatabase(string email)
    {
        var result = await client.GetUserWithRoles.ExecuteAsync(email);
        if (result != null && result.Data != null && result.Data.UserWithRoles.Email != null && result.Data.UserWithRoles.Email != null)
            return result!.Data!.UserWithRoles.Email;
        else
            return "";
    }

    public async Task GoToNextPage()
    {
        if (Email != null && Email.Trim().Length != 0 && RegexUtilities.IsValidEmail(Email))
        {
            bool forceLoad = false;

            string emailInDatabase = await GetEmailFromDatabase(Email);
            if (emailInDatabase != null && emailInDatabase.Trim().Length != 0)
            {
                appState.SetEmail(emailInDatabase);
                //string pagelink = "/create-password/" + emailInDatabase;
                string pagelink = "/create-password/";
                NavigationManager.NavigateTo(pagelink, forceLoad);
            }
            else
            {
                Email = errorMsg1;
                appState.SetEmail(Email);
            }
        }
        else
        {            
            Email = errorMsg2;
            appState.SetEmail(Email);
        }        
    }
 }
