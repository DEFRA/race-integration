@page "/choose-a-reservoir"
@inject NavigationManager NavigationManager
<div class="govuk-width-container ">

    <a class="govuk-back-link" href="javascript:history.back()">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

        <div class="govuk-grid-row">

            <div class="govuk-grid-column-two-thirds">
                <div>
                    <span class="govuk-heading-xl" for="choose a reservoir">
                        Which reservoir do you want to submit an annual statement for?
                    </span>
                </div>

                <div>
                    <MudAutocomplete T="string" @bind-Value="selectedValue" SearchFunc="@SearchValues" Variant="Variant.Outlined"
                         OpenIcon="" CloseIcon="" Style="width:400px;" Class="rounded-0 border border-solid" />
                </div>

                <div>
                    <button class="govuk-button govuk-button--start govuk-!-margin-top-2 govuk-!-margin-bottom-8"
                            data-module="govuk-button" @onclick=@(args => GoToNextPage())>
                        Continue
                    </button>
                </div>

                <div class="govuk-!-margin-top-8">
                    <p>
                        <a class="govuk-link govuk-link--no-visited-state" href="/reservoir-not-listed">
                            Reservoir not listed?
                        </a>
                    </p>
                </div>

            </div>
        </div>
    </main>
</div>

@code {
    private string selectedValue;

    private string[] reservoirNames =
    {
        "River Foss Flood Storage Reservoir",
        "River Nar Flood Storage Area", 
        "River Park Pond",
        "River Rase North Branch",
        "River Rase South Branch",
        "Rockingham Reservoir"
    };

    private async Task<IEnumerable<string>> SearchValues(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return reservoirNames;
        return reservoirNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public void GoToNextPage()
    {
        var reservoirName = selectedValue;
        bool forceLoad = true;
        string pagelink = "/reservoir-details/" + reservoirName;
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
}
