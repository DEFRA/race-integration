@page "/create-password"
@inject NavigationManager NavigationManager
@inject AppState appState
@inject RACE2GraphQLClient client
@inject IPasswordHasher<UserDetail> passwordHasher
@implements IDisposable

<div class="govuk-width-container ">

    <a class="govuk-back-link" href="javascript:history.back()">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

        <div class="govuk-grid-row">

            <div class="govuk-grid-column-two-thirds">

                <h1 class="govuk-heading-xl">Create a password</h1>

                <EditForm Model="@_enterPasswordClass" OnSubmit="GoToNextPage">

                    <p>Your passwords must be 8 or more characters and must match. You can use a mixture of atleast one each of uppercase letters, lowercase letters, numbers and symbols(special characters).</p>

                    <div class="govuk-form-group">
                        <label class="govuk-label" for="govGatePassword">
                            Create a password
                        </label>

                        <InputText class="govuk-input govuk-!-width-three-quarters" id="govGatePassword" name="govGatePassword" type="password"
                                   @bind-Value="_enterPasswordClass.Password">
                        </InputText>
                    </div>

                    <div class="govuk-form-group">
                        <label class="govuk-label" for="govGatePasswordConfirm">
                            Confirm your password
                        </label>

                        <InputText class="govuk-input govuk-!-width-three-quarters" id="govGatePasswordConfirm" name="govGatePasswordConfirm" type="password"
                                   @bind-Value="_enterPasswordClass.ConfirmPassword">
                        </InputText>
                    </div>

                    <button class="govuk-button govuk-button--start govuk-!-margin-top-2 govuk-!-margin-bottom-8" type="submit"
                            data-module="govuk-button">
                        Continue
                    </button>
                </EditForm>

                <!-- <details class="govuk-details" data-module="govuk-details">
                    <summary class="govuk-details__summary">
                        <span class="govuk-details__summary-text">
                            Help with this page
                        </span>
                    </summary>
                    <div class="govuk-details__text">
                        If you are having problems you can call the service helpline on 0300 322 9434. Monday to Friday 8am to
                        10pm, and Saturday to Sunday 8am to 4pm. Alternatively you can email the help desk: <a href="#"
                        class="govuk-link--no-visited-state"> servicedesk@defra.gov.uk</a>
                    </div>
                </details> -->

            </div>
        </div>
    </main>
</div>

@code{
    string passwordRegEx = @"^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!*@#$%^&+=]).*$";
    public string Email { get; set; } = default!;
    public UserDetail CurrentUser { get; set; } = new UserDetail();
    void OnEmailStateChange(object sender, EventArgs e) => StateHasChanged();
    void OnUserDetailStateChange(object sender, EventArgs e) => StateHasChanged();
    protected override void OnInitialized()
    {
        appState.StateChangeHandler += OnEmailStateChange;
        appState.StateChangeHandler += OnUserDetailStateChange;
        Email = appState.GetEmail();
        CurrentUser = appState.GetUser();
    }    

    public class EnterPasswordClass
    {
        public string Password = "";
        public string ConfirmPassword = "";
    }

    private EnterPasswordClass _enterPasswordClass = new EnterPasswordClass();

    public async Task GoToNextPage()
    {
        string pw = _enterPasswordClass.Password;
        string cpw = _enterPasswordClass.ConfirmPassword;
        if (pw == cpw)
        {
            if (System.Text.RegularExpressions.Regex.Match(pw, passwordRegEx).Success){
                //var user = new UserDetail();
                var result = await client.GetUserByEmailID.ExecuteAsync(Email);
                //user.Id = result.Data.UserByEmailID.Id;
                CurrentUser.PasswordHash = passwordHasher.HashPassword(CurrentUser, _enterPasswordClass.Password);

                bool forceLoad = true;
                NavigationManager.NavigateTo("/choose-a-reservoir/", forceLoad);
            }
            else
            {
                _enterPasswordClass.ConfirmPassword = "Password is not strong enough!!!";
            }
        }
        else
        {
            _enterPasswordClass.ConfirmPassword = "Passwords do not match!!!";
        }
    }

    void IDisposable.Dispose()
    {
        appState.StateChangeHandler -= OnEmailStateChange;
    }
}