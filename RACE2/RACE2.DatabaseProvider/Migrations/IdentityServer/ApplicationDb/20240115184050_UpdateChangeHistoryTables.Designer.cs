// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RACE2.DatabaseProvider.Data;

#nullable disable

namespace RACE2.DatabaseProvider.Migrations.IdentityServer.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240115184050_UpdateChangeHistoryTables")]
    partial class UpdateChangeHistoryTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RACE2.DataModel.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndActionId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool?>("IsComplianceAction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OwnedByName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OwnedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("OwnerRoleId");

                    b.HasIndex("ReservoirId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("RACE2.DataModel.ActionsChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsBackEndChange")
                        .HasColumnType("bit");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int>("SourceSubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ChangeByUserId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SourceSubmissionId");

                    b.ToTable("ActionsChangeHistory");
                });

            modelBuilder.Entity("RACE2.DataModel.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackEndAddressKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("RACE2.DataModel.AuditTable", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("AuditTables");
                });

            modelBuilder.Entity("RACE2.DataModel.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndCommentId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ClosedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsQualityCheckRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentidId")
                        .HasColumnType("int");

                    b.Property<string>("RelatesToObject")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("RelatesToRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ParentCommentidId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RACE2.DataModel.CommentsChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChangeByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsBackEndChange")
                        .HasColumnType("bit");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int>("SourceSubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangeByUserId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SourceSubmissionId");

                    b.ToTable("CommentsChangeHistory");
                });

            modelBuilder.Entity("RACE2.DataModel.ComplianceSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ComplianceIndicatorOtherDesc")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ComplianceIndicatorType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ComplianceStatus")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceSubmissionIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SourceSubmissionIdId");

                    b.ToTable("ComplianceSummary");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentEngineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EngineerUserId");

                    b.ToTable("DocumentEngineer");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RelatedDocumentId");

                    b.ToTable("DocumentRelationship");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentReservoir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservoirId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ReservoirId");

                    b.ToTable("DocumentReservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("DocumentSubmission");
                });

            modelBuilder.Entity("RACE2.DataModel.EarlyInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndEarlyInspectionId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ReasonSummary")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservoirId");

                    b.ToTable("EarlyInspection");
                });

            modelBuilder.Entity("RACE2.DataModel.FeatureFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FeatureFunction");
                });

            modelBuilder.Entity("RACE2.DataModel.FloodPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndCertificateId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CertificateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsTested")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RequiresRevision")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<string>("RevisionDetails")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RevisionType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ReservoirId");

                    b.ToTable("FloodPlan");
                });

            modelBuilder.Entity("RACE2.DataModel.FloodPlanTesting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlanElement")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("TestDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TestInterval")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("FloodPlanTesting");
                });

            modelBuilder.Entity("RACE2.DataModel.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Properties")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("RACE2.DataModel.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("cBackEndOganisationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("cBusinessType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("RACE2.DataModel.OrganisationAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Addressid")
                        .HasColumnType("int");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Addressid");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationAddress");
                });

            modelBuilder.Entity("RACE2.DataModel.OrganisationReservoir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryContactUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryContactUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PrimaryContactUserId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SecondaryContactUserId");

                    b.ToTable("OrganisationReservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.PanelMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembershipNumber")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PanelName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PanelMembership");
                });

            modelBuilder.Entity("RACE2.DataModel.PicklistDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayLabel")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PicklistName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PicklistType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("isDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PicklistDefinitions");
                });

            modelBuilder.Entity("RACE2.DataModel.PicklistMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndValueId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PicklistValueIdId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PicklistValueIdId");

                    b.ToTable("PicklistMappings");
                });

            modelBuilder.Entity("RACE2.DataModel.RAW_ActionSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mandatory")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Priority")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ReservoirName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("RAW_ActionSummary");
                });

            modelBuilder.Entity("RACE2.DataModel.RAW_MaintenanceMeasures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MergedComment")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ReservoirName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("RAW_MaintenanceMeasures");
                });

            modelBuilder.Entity("RACE2.DataModel.RAW_MIOS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MergedComment")
                        .HasColumnType("bit");

                    b.Property<string>("Outstanding")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ReservoirName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("RAW_MIOS");
                });

            modelBuilder.Entity("RACE2.DataModel.RAW_StatementDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DocumentName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("GridReference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("HasAlternativeEngineerNo")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAlternativeEngineerYes")
                        .HasColumnType("bit");

                    b.Property<string>("HasNoMIOSItems")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("HasNoMaintenanceItems")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("HasNoWatchItems")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsEarlyInspectionRequiredNo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEarlyInspectionRequiredYes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeOfStatement12_2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeOfStatement12_2A")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastCertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastInspectingEngineerName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastInspectingEngineerPhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("LastInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NearestTown")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("NextInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservoirName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignatureStrip")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupervisingEngineerAddress")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SupervisingEngineerCompany")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SupervisingEngineerEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SupervisingEngineerPhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SupervisingEngineer_Long")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SupervisingEngineer_Short")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UndertakeName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UndertakerAddress")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UndertakerEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UndertakerPhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("RAW_StatementDetails");
                });

            modelBuilder.Entity("RACE2.DataModel.RAW_WatchItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MergedComment")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ReservoirName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("RAW_WatchItems");
                });

            modelBuilder.Entity("RACE2.DataModel.Reservoir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndReservoirId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConstructionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GridReference")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool?>("HasMultipleDams")
                        .HasColumnType("bit");

                    b.Property<string>("KeyFacts")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastCertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastInspectionByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastInspectionEngineerName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastInspectionEngineerPhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NearestTown")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("NextInspectionDate102")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextInspectionDate103")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatorType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PublicCategory")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PublicName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegisteredCategory")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RegisteredName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SurfaceArea")
                        .HasColumnType("int");

                    b.Property<decimal?>("TopWaterLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("VerifiedDetailsDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LastInspectionByUserId");

                    b.ToTable("Reservoirs");
                });

            modelBuilder.Entity("RACE2.DataModel.ReservoirDetailsChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChangeByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsBackEndChange")
                        .HasColumnType("bit");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int>("SourceSubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangeByUserId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SourceSubmissionId");

                    b.ToTable("ReservoirDetailsChangeHistory");
                });

            modelBuilder.Entity("RACE2.DataModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("RACE2.DataModel.SafetyMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackEndSafetyMeasureId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Othertype")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ReservoirId");

                    b.ToTable("SafetyMeasures");
                });

            modelBuilder.Entity("RACE2.DataModel.SafetyMeasuresChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChangeByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsBackEndChange")
                        .HasColumnType("bit");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int>("SourceSubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangeByUserId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SourceSubmissionId");

                    b.ToTable("SafetyMeasuresChangeHistory");
                });

            modelBuilder.Entity("RACE2.DataModel.ScreenDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("HasSignificantChange")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("ScreenDefinition");
                });

            modelBuilder.Entity("RACE2.DataModel.ScreenSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ScreenSequences");
                });

            modelBuilder.Entity("RACE2.DataModel.ScreenSequenceAuditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChangeEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewValue")
                        .HasColumnType("int");

                    b.Property<int>("OldValue")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ScreenSequenceAuditHistory");
                });

            modelBuilder.Entity("RACE2.DataModel.StatementDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextStatementDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatementType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("StatementDetails");
                });

            modelBuilder.Entity("RACE2.DataModel.SubmissionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLegacySubmission")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedScreenId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OverrideTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionReference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("SubmittedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("SubmissionStatus");
                });

            modelBuilder.Entity("RACE2.DataModel.SupportingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AVScanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlobStorageFileName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CleanFileStorageLink")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentAuthorName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DocumentStatus")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsClean")
                        .HasColumnType("bit");

                    b.Property<string>("ProtectiveMarking")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RaceDocumentId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int>("SourceServiceId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<decimal?>("TemplateVersion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UploadByUserId")
                        .HasColumnType("int");

                    b.Property<string>("UploadFileLocation")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UploadFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UploadFileType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("SourceServiceId");

                    b.HasIndex("UploadByUserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("RACE2.DataModel.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Addressid")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Addressid");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("RACE2.DataModel.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("cAlternativeEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("cAlternativeEmergencyPhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("cAlternativeMobile")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("cAlternativePhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("cBackEndUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("cCreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("cDefraId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<string>("cDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cEmergencyPhone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<string>("cFirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<string>("cFullName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("cIsFirstTimeUser")
                        .HasColumnType("bit");

                    b.Property<string>("cJobTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<DateTime?>("cLastAccessDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("cLastModifiedByUserIdId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("cLastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("cLastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<string>("cMobile")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<string>("cStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.Property<string>("cType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue(" ");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("cLastModifiedByUserIdId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RACE2.DataModel.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeatureFunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FeatureFunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("RACE2.DataModel.UserReservoir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AppointmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AppointmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackEndAppointmentId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ReservoirId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.UserRole", b =>
                {
                    b.Property<int>("cId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cId"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("cEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("cStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("cStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("RACE2.DataModel.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RACE2.DataModel.Action", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "OwnedByUser")
                        .WithMany()
                        .HasForeignKey("OwnedByUserId");

                    b.HasOne("RACE2.DataModel.UserRole", "OwnerRole")
                        .WithMany()
                        .HasForeignKey("OwnerRoleId");

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedByUser");

                    b.Navigation("OwnerRole");

                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.ActionsChangeHistory", b =>
                {
                    b.HasOne("RACE2.DataModel.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("ChangeByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.SubmissionStatus", "SourceSubmission")
                        .WithMany()
                        .HasForeignKey("SourceSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Reservoir");

                    b.Navigation("SourceSubmission");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("RACE2.DataModel.Comment", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "ClosedByUser")
                        .WithMany()
                        .HasForeignKey("ClosedByUserId");

                    b.HasOne("RACE2.DataModel.UserDetail", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Comment", "ParentCommentid")
                        .WithMany()
                        .HasForeignKey("ParentCommentidId");

                    b.Navigation("ClosedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ParentCommentid");
                });

            modelBuilder.Entity("RACE2.DataModel.CommentsChangeHistory", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("ChangeByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.SubmissionStatus", "SourceSubmission")
                        .WithMany()
                        .HasForeignKey("SourceSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Reservoir");

                    b.Navigation("SourceSubmission");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("RACE2.DataModel.ComplianceSummary", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId");

                    b.HasOne("RACE2.DataModel.SubmissionStatus", "SourceSubmissionId")
                        .WithMany()
                        .HasForeignKey("SourceSubmissionIdId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Reservoir");

                    b.Navigation("SourceSubmissionId");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentEngineer", b =>
                {
                    b.HasOne("RACE2.DataModel.SupportingDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("RACE2.DataModel.UserDetail", "EngineerUser")
                        .WithMany()
                        .HasForeignKey("EngineerUserId");

                    b.Navigation("Document");

                    b.Navigation("EngineerUser");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentRelationship", b =>
                {
                    b.HasOne("RACE2.DataModel.SupportingDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.SupportingDocument", "RelatedDocument")
                        .WithMany()
                        .HasForeignKey("RelatedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("RelatedDocument");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentReservoir", b =>
                {
                    b.HasOne("RACE2.DataModel.SupportingDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId");

                    b.Navigation("Document");

                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.DocumentSubmission", b =>
                {
                    b.HasOne("RACE2.DataModel.SupportingDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("RACE2.DataModel.SubmissionStatus", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId");

                    b.Navigation("Document");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("RACE2.DataModel.EarlyInspection", b =>
                {
                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.FloodPlan", b =>
                {
                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.OrganisationAddress", b =>
                {
                    b.HasOne("RACE2.DataModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Addressid");

                    b.HasOne("RACE2.DataModel.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Address");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("RACE2.DataModel.OrganisationReservoir", b =>
                {
                    b.HasOne("RACE2.DataModel.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("RACE2.DataModel.UserDetail", "PrimaryContactUser")
                        .WithMany()
                        .HasForeignKey("PrimaryContactUserId");

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId");

                    b.HasOne("RACE2.DataModel.UserDetail", "SecondaryContactUser")
                        .WithMany()
                        .HasForeignKey("SecondaryContactUserId");

                    b.Navigation("Organisation");

                    b.Navigation("PrimaryContactUser");

                    b.Navigation("Reservoir");

                    b.Navigation("SecondaryContactUser");
                });

            modelBuilder.Entity("RACE2.DataModel.PanelMembership", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RACE2.DataModel.PicklistMapping", b =>
                {
                    b.HasOne("RACE2.DataModel.PicklistDefinition", "PicklistValueId")
                        .WithMany()
                        .HasForeignKey("PicklistValueIdId");

                    b.Navigation("PicklistValueId");
                });

            modelBuilder.Entity("RACE2.DataModel.Reservoir", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "LastInspectionByUser")
                        .WithMany()
                        .HasForeignKey("LastInspectionByUserId");

                    b.Navigation("LastInspectionByUser");
                });

            modelBuilder.Entity("RACE2.DataModel.ReservoirDetailsChangeHistory", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("ChangeByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.SubmissionStatus", "SourceSubmission")
                        .WithMany()
                        .HasForeignKey("SourceSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservoir");

                    b.Navigation("SourceSubmission");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("RACE2.DataModel.SafetyMeasure", b =>
                {
                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId");

                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("RACE2.DataModel.SafetyMeasuresChangeHistory", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("ChangeByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.SafetyMeasure", "SafetyMeasure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.SubmissionStatus", "SourceSubmission")
                        .WithMany()
                        .HasForeignKey("SourceSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservoir");

                    b.Navigation("SafetyMeasure");

                    b.Navigation("SourceSubmission");

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("RACE2.DataModel.ScreenDefinition", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("RACE2.DataModel.ScreenSequence", b =>
                {
                    b.HasOne("RACE2.DataModel.ScreenDefinition", "Screen")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.FeatureFunction", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screen");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("RACE2.DataModel.ScreenSequenceAuditHistory", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.FeatureFunction", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("RACE2.DataModel.StatementDetails", b =>
                {
                    b.HasOne("RACE2.DataModel.SupportingDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("RACE2.DataModel.SubmissionStatus", b =>
                {
                    b.HasOne("RACE2.DataModel.UserDetail", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany()
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.FeatureFunction", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.UserDetail", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Reservoir");

                    b.Navigation("Service");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("RACE2.DataModel.SupportingDocument", b =>
                {
                    b.HasOne("RACE2.DataModel.Reservoir", null)
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("ReservoirId");

                    b.HasOne("RACE2.DataModel.FeatureFunction", "SourceService")
                        .WithMany()
                        .HasForeignKey("SourceServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.UserDetail", "UploadByUser")
                        .WithMany()
                        .HasForeignKey("UploadByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceService");

                    b.Navigation("UploadByUser");
                });

            modelBuilder.Entity("RACE2.DataModel.UserAddress", b =>
                {
                    b.HasOne("RACE2.DataModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Addressid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.UserDetail", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RACE2.DataModel.UserDetail", b =>
                {
                    b.HasOne("RACE2.DataModel.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("RACE2.DataModel.UserDetail", "cLastModifiedByUserId")
                        .WithMany()
                        .HasForeignKey("cLastModifiedByUserIdId");

                    b.Navigation("Organisation");

                    b.Navigation("cLastModifiedByUserId");
                });

            modelBuilder.Entity("RACE2.DataModel.UserPermission", b =>
                {
                    b.HasOne("RACE2.DataModel.FeatureFunction", null)
                        .WithMany("Permission")
                        .HasForeignKey("FeatureFunctionId");

                    b.HasOne("RACE2.DataModel.Role", null)
                        .WithMany("Permission")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("RACE2.DataModel.UserReservoir", b =>
                {
                    b.HasOne("RACE2.DataModel.Reservoir", "Reservoir")
                        .WithMany("UserReservoirs")
                        .HasForeignKey("ReservoirId");

                    b.HasOne("RACE2.DataModel.UserDetail", "User")
                        .WithMany("Reservoirs")
                        .HasForeignKey("UserId");

                    b.Navigation("Reservoir");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RACE2.DataModel.UserRole", b =>
                {
                    b.HasOne("RACE2.DataModel.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RACE2.DataModel.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RACE2.DataModel.FeatureFunction", b =>
                {
                    b.Navigation("Permission");
                });

            modelBuilder.Entity("RACE2.DataModel.Reservoir", b =>
                {
                    b.Navigation("SupportingDocuments");

                    b.Navigation("UserReservoirs");
                });

            modelBuilder.Entity("RACE2.DataModel.Role", b =>
                {
                    b.Navigation("Permission");
                });

            modelBuilder.Entity("RACE2.DataModel.UserDetail", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Reservoirs");
                });
#pragma warning restore 612, 618
        }
    }
}
