@page "/upload-multiple-s12reports"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using Microsoft.AspNetCore.Authorization
@using RACE2.DataModel
@using RACE2.Dto
@using Fluxor
@using RACE2.FrontEndWebServer.FluxorImplementation.Actions
@using RACE2.FrontEndWebServer.FluxorImplementation.Stores
@using RACE2.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService userService
@inject IBlobStorageService blobStorageService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject IState<CurrentReservoirState> CurrentReservoirState
@attribute [Authorize]

<div class="govuk-width-container ">

    <a class="govuk-back-link" @onclick="goback">Back</a>

    <main class="govuk-main-wrapper govuk-main-wrapper--auto-spacing" id="main-content" role="main">

        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">

                <h1 class="govuk-heading-xl">What is the new reservoir name?</h1>

                    <div class="govuk-form-group">
                        <label class="govuk-label govuk-label--m">
                            Choose file(s) to upload
                        </label>
                        <br />
                    <label>
                        <InputFile class="form-control" disabled="@fileLoading" OnChange="@OnInputFileChange" single accesskey=".pdf,.docx,.jpg,.jpeg,.png" />
                    </label>
                    @if (fileLoading)
                    {
                        <i class="fa fa-refresh"></i> <span>Loading...</span>
                    }
                    </div>

                <button class="govuk-button govuk-!-margin-top-6 govuk-!-margin-bottom-6" data-module="govuk-button" disabled="@fileLoading" @onclick="OnUploadSubmit">Upload File</button>

            </div>
        </div>
        @if (displayMessage.Length > 0)
        {
            <div class="alert alert-success">
                <strong>Success!</strong> @displayMessage.
            </div>
        }
        <br />
        <div class="row">
            @if (fileUploadViewModels.Count > 0)
            {
                <table class="table table-responsive table-bordered">
                    <thead class="text-primary">
                        <tr>
                            <th>File</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attachment in fileUploadViewModels)
                        {

                            <tr>
                                <td>
                                    <a class="text-primary"><i class="fa-solid fa-paperclip"></i> @attachment.FileName</a>
                                </td>

                                <td>
                                    <span class="oi oi-delete" aria-hidden="true" @onclick="() => OnFileDeleteClick(attachment)"></span>
                                    <span class="oi oi-eye" aria-hidden="true" @onclick="() => OnFileViewClick(attachment)"></span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">
                    <strong>No Files!</strong>
                </div>
            }
        </div>
    </main>
</div>
@code 
{
    private int UserId { get; set; } = 0;
    private string UserName { get; set; } = "Unknown";
    private UserDetail UserDetail { get; set; }
    private string warninngMessage = "";
    private string displayMessage = "";
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool fileLoading;
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private List<FileUploadViewModel> fileUploadViewModels = new();
    public Reservoir CurrentReservoir { get; set; } = new Reservoir();

    protected override async void OnInitialized()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Claims.ToList().FirstOrDefault(c => c.Type == "name").Value;
        var userDetails = await userService.GetUserByEmailID(UserName);
        UserId = userDetails.Id;
        UserDetail = new UserDetail()
            {
                UserName = UserName,
                Id = UserId,
                Email = userDetails.Email,
                c_first_name = userDetails.c_first_name,
                c_last_name = userDetails.c_last_name
            };
        CurrentReservoir = CurrentReservoirState.Value.CurrentReservoir;

        base.OnInitialized();
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async void OnUploadSubmit()
    {
        fileLoading = true;
        foreach (var file in selectedFiles)
        {
            try
            {
                var extn = file.Name.Split('.')[1];
                var containerName = UserDetail.c_first_name.ToLower() + UserDetail.c_last_name.ToLower();
                var trustedFileNameForFileStorage = "S12Report_" + CurrentReservoir.PublicName + "_" + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Year + "." + extn;
                var blobUrl = await blobStorageService.UploadFileToBlobAsync(containerName, trustedFileNameForFileStorage, file.ContentType, file.OpenReadStream(20971520));
                if (blobUrl != null)
                {
                    FileUploadViewModel fileUploadViewModel = new FileUploadViewModel()
                        {
                            FileName = trustedFileNameForFileStorage,
                            FileStorageUrl = blobUrl,
                            ContentType = file.ContentType,
                        };

                    fileUploadViewModels.Add(fileUploadViewModel);
                    displayMessage = trustedFileNameForFileStorage + " Uploaded!!";
                }
                else
                    warninngMessage = "File Upload failed, Please try again!!";

            }
            catch (Exception ex)
            {
                warninngMessage = "File Upload failed, Please try again!!";
            }
        }

        fileLoading = false;
        this.StateHasChanged();
    }

    private async void OnFileDeleteClick(FileUploadViewModel attachment)
    {
        try
        {
            var containerName = UserDetail.c_first_name.ToLower() + UserDetail.c_last_name.ToLower();
            var deleteResponse = await blobStorageService.DeleteFileToBlobAsync(containerName, attachment.FileName);
            if (deleteResponse)
            {
                fileUploadViewModels.Remove(attachment);
                displayMessage = attachment.FileName + " Deleted!!";
            }

        }
        catch (Exception)
        {
            warninngMessage = "Something went wrong! Please try again.";
        }
        this.StateHasChanged();
    }
    private async void OnFileViewClick(FileUploadViewModel attachment)
    {
        try
        {
            var containerName = UserDetail.c_first_name.ToLower() + UserDetail.c_last_name.ToLower();
            var sasToken = await blobStorageService.GetBlobAsTokenByFile(containerName, attachment.FileName);
            if (sasToken != null)
            {
                string fileUrl = attachment.FileStorageUrl + "?" + sasToken;
                await jsRuntime.InvokeAsync<object>("open", fileUrl, "_blank");
            }

        }
        catch (Exception)
        {
            warninngMessage = "Something went wrong! Please try again.";
        }
        this.StateHasChanged();
    }

    private void goback()
    {
        bool forceLoad = false;
        string pagelink = "/reservoir-details";
        NavigationManager.NavigateTo(pagelink, forceLoad);
    }
}
